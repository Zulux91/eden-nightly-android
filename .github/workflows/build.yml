name: Build Eden Nightly
concurrency:
  group: build-eden-nightly-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch: {}

jobs:
  info:
    runs-on: ubuntu-latest
    name: "Get info"
    strategy:
      matrix:
        target: [Info]
    steps:
      - uses: actions/checkout@v5.0.0
        with:
          persist-credentials: false

      - name: Get the latest release count
        env:
          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          api_url="https://api.github.com/repos/${{ github.repository }}"
          latest_release_info=$(curl -H "Authorization: token $GH_TOKEN" "$api_url/releases/latest")
          last_release_tag=$(echo "$latest_release_info" | jq -r '.tag_name')
          echo "${last_release_tag}"
          old_count="${last_release_tag##*-}"
          echo "OLD_COUNT=$old_count" >> "$GITHUB_ENV"

      - name: Generate changelog
        run: |
          chmod +x ./changelog.sh
          ./changelog.sh

      - name: Upload tag file
        uses: actions/upload-artifact@v5.0.0
        with:
          name: tag
          path: ~/tag

      - name: Upload count file
        uses: actions/upload-artifact@v5.0.0
        with:
          name: count
          path: ~/count

      - name: Upload changelog file
        uses: actions/upload-artifact@v5.0.0
        with:
          name: changelog
          path: ~/changelog

      - name: Upload source code
        uses: actions/upload-artifact@v5.0.0
        with:
          name: source
          path: artifacts

  android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [Replace, Coexist, Optimized, Legacy]
    continue-on-error: true
    name: "Android (${{ matrix.target }})"
    env:
      TARGET: ${{ matrix.target }}
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros

    steps:
      - uses: actions/checkout@v5.0.0

      - name: Install dependencies
        run: |
          sudo rm /var/lib/man-db/auto-update
          sudo apt-get update -y
          sudo apt-get install ccache glslang-tools libvulkan-dev python3-requests -y
          
      - name: Clone Eden
        run: |
          git clone 'https://git.eden-emu.dev/eden-emu/eden.git' ./eden

      - name: Restore ccache for ${{ matrix.target }}
        uses: actions/cache/restore@v4
        id: restore-ccache-cache
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-android-ccache-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-android-ccache-${{ matrix.target }}-
            
      - name: Compile Eden android
        run: |
          chmod +x ./eden-android.sh
          ./eden-android.sh

      - name: Save ccache for ${{ matrix.target }}
        if: ${{ github.ref_name == 'main' }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ steps.restore-ccache-cache.outputs.cache-primary-key }}

      - name: Upload artifact
        uses: actions/upload-artifact@v5.0.0
        with:
          name: eden-android-${{ matrix.target }}
          path: eden/src/android/artifacts/

  release:
    name: "release"
    if: ${{ github.ref_name == 'main' }}
    needs: [info, android]
    permissions:
      actions: read
      security-events: write
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v6.0.0
        with:
          pattern: "*"
          merge-multiple: true

      - name: Generate changelog
        run: |
          echo "TAG=$(cat tag)" >> "${GITHUB_ENV}"
          echo "COUNT=$(cat count)" >> "${GITHUB_ENV}"
          echo "BODY<<EOF" >> "${GITHUB_ENV}"
          cat changelog >> "${GITHUB_ENV}"
          echo "EOF" >> "${GITHUB_ENV}"

      - name: Release Eden
        uses: softprops/action-gh-release@v2.4.1
        with:
          name: "Eden Unofficial Nightly Release: ${{ env.COUNT }}"
          tag_name: "${{ env.TAG }}"
          body: "${{ env.BODY }}"
          prerelease: false
          draft: false
          generate_release_notes: false
          fail_on_unmatched_files: false
          make_latest: true
          files: |
            *.apk
